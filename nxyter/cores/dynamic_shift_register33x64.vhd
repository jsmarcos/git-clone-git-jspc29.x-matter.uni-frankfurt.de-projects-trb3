-- VHDL netlist generated by SCUBA Diamond (64-bit) 3.2.0.134
-- Module  Version: 5.1
--/usr/local/opt/lattice_diamond/diamond/3.2/ispfpga/bin/lin64/scuba -w -n dynamic_shift_register33x64 -lang vhdl -synth synplify -bus_exp 7 -bb -arch ep5c00 -type shiftreg -width 33 -depth 64 -mode 10 -pipe_final_output 

-- Sat Aug  9 14:16:23 2014

library IEEE;
use IEEE.std_logic_1164.all;
-- synopsys translate_off
library ecp3;
use ecp3.components.all;
-- synopsys translate_on

entity dynamic_shift_register33x64 is
    port (
        Din: in  std_logic_vector(32 downto 0); 
        Addr: in  std_logic_vector(5 downto 0); 
        Clock: in  std_logic; 
        ClockEn: in  std_logic; 
        Reset: in  std_logic; 
        Q: out  std_logic_vector(32 downto 0));
end dynamic_shift_register33x64;

architecture Structure of dynamic_shift_register33x64 is

    -- internal signal declarations
    signal Reset_inv: std_logic;
    signal ishreg_addr_w0: std_logic;
    signal ishreg_addr_w1: std_logic;
    signal sreg_0_ctr_1_ci: std_logic;
    signal ishreg_addr_w2: std_logic;
    signal ishreg_addr_w3: std_logic;
    signal co0: std_logic;
    signal ishreg_addr_w4: std_logic;
    signal ishreg_addr_w5: std_logic;
    signal co2: std_logic;
    signal co1: std_logic;
    signal shreg_addr_r0: std_logic;
    signal precin: std_logic;
    signal high_inv: std_logic;
    signal scuba_vhi: std_logic;
    signal shreg_addr_w0: std_logic;
    signal shreg_addr_r1: std_logic;
    signal shreg_addr_r2: std_logic;
    signal co0_1: std_logic;
    signal shreg_addr_w1: std_logic;
    signal shreg_addr_w2: std_logic;
    signal shreg_addr_r3: std_logic;
    signal shreg_addr_r4: std_logic;
    signal co1_1: std_logic;
    signal shreg_addr_w3: std_logic;
    signal shreg_addr_w4: std_logic;
    signal shreg_addr_r5: std_logic;
    signal co2_1: std_logic;
    signal shreg_addr_w5: std_logic;
    signal scuba_vlo: std_logic;

    -- local component declarations
    component CU2
        port (CI: in  std_logic; PC0: in  std_logic; PC1: in  std_logic; 
            CO: out  std_logic; NC0: out  std_logic; NC1: out  std_logic);
    end component;
    component FADD2B
        port (A0: in  std_logic; A1: in  std_logic; B0: in  std_logic; 
            B1: in  std_logic; CI: in  std_logic; COUT: out  std_logic; 
            S0: out  std_logic; S1: out  std_logic);
    end component;
    component FSUB2B
        port (A0: in  std_logic; A1: in  std_logic; B0: in  std_logic; 
            B1: in  std_logic; BI: in  std_logic; BOUT: out  std_logic; 
            S0: out  std_logic; S1: out  std_logic);
    end component;
    component FD1P3DX
        port (D: in  std_logic; SP: in  std_logic; CK: in  std_logic; 
            CD: in  std_logic; Q: out  std_logic);
    end component;
    component INV
        port (A: in  std_logic; Z: out  std_logic);
    end component;
    component VHI
        port (Z: out  std_logic);
    end component;
    component VLO
        port (Z: out  std_logic);
    end component;
    component PDPW16KC
        generic (GSR : in String; CSDECODE_R : in String; 
                CSDECODE_W : in String; REGMODE : in String; 
                DATA_WIDTH_R : in Integer; DATA_WIDTH_W : in Integer);
        port (DI0: in  std_logic; DI1: in  std_logic; DI2: in  std_logic; 
            DI3: in  std_logic; DI4: in  std_logic; DI5: in  std_logic; 
            DI6: in  std_logic; DI7: in  std_logic; DI8: in  std_logic; 
            DI9: in  std_logic; DI10: in  std_logic; DI11: in  std_logic; 
            DI12: in  std_logic; DI13: in  std_logic; 
            DI14: in  std_logic; DI15: in  std_logic; 
            DI16: in  std_logic; DI17: in  std_logic; 
            DI18: in  std_logic; DI19: in  std_logic; 
            DI20: in  std_logic; DI21: in  std_logic; 
            DI22: in  std_logic; DI23: in  std_logic; 
            DI24: in  std_logic; DI25: in  std_logic; 
            DI26: in  std_logic; DI27: in  std_logic; 
            DI28: in  std_logic; DI29: in  std_logic; 
            DI30: in  std_logic; DI31: in  std_logic; 
            DI32: in  std_logic; DI33: in  std_logic; 
            DI34: in  std_logic; DI35: in  std_logic; 
            ADW0: in  std_logic; ADW1: in  std_logic; 
            ADW2: in  std_logic; ADW3: in  std_logic; 
            ADW4: in  std_logic; ADW5: in  std_logic; 
            ADW6: in  std_logic; ADW7: in  std_logic; 
            ADW8: in  std_logic; BE0: in  std_logic; BE1: in  std_logic; 
            BE2: in  std_logic; BE3: in  std_logic; CEW: in  std_logic; 
            CLKW: in  std_logic; CSW0: in  std_logic; 
            CSW1: in  std_logic; CSW2: in  std_logic; 
            ADR0: in  std_logic; ADR1: in  std_logic; 
            ADR2: in  std_logic; ADR3: in  std_logic; 
            ADR4: in  std_logic; ADR5: in  std_logic; 
            ADR6: in  std_logic; ADR7: in  std_logic; 
            ADR8: in  std_logic; ADR9: in  std_logic; 
            ADR10: in  std_logic; ADR11: in  std_logic; 
            ADR12: in  std_logic; ADR13: in  std_logic; 
            CER: in  std_logic; CLKR: in  std_logic; CSR0: in  std_logic; 
            CSR1: in  std_logic; CSR2: in  std_logic; RST: in  std_logic; 
            DO0: out  std_logic; DO1: out  std_logic; 
            DO2: out  std_logic; DO3: out  std_logic; 
            DO4: out  std_logic; DO5: out  std_logic; 
            DO6: out  std_logic; DO7: out  std_logic; 
            DO8: out  std_logic; DO9: out  std_logic; 
            DO10: out  std_logic; DO11: out  std_logic; 
            DO12: out  std_logic; DO13: out  std_logic; 
            DO14: out  std_logic; DO15: out  std_logic; 
            DO16: out  std_logic; DO17: out  std_logic; 
            DO18: out  std_logic; DO19: out  std_logic; 
            DO20: out  std_logic; DO21: out  std_logic; 
            DO22: out  std_logic; DO23: out  std_logic; 
            DO24: out  std_logic; DO25: out  std_logic; 
            DO26: out  std_logic; DO27: out  std_logic; 
            DO28: out  std_logic; DO29: out  std_logic; 
            DO30: out  std_logic; DO31: out  std_logic; 
            DO32: out  std_logic; DO33: out  std_logic; 
            DO34: out  std_logic; DO35: out  std_logic);
    end component;
    attribute MEM_LPC_FILE : string; 
    attribute MEM_INIT_FILE : string; 
    attribute RESETMODE : string; 
    attribute GSR : string; 
    attribute MEM_LPC_FILE of sram_1_0_0_0 : label is "dynamic_shift_register33x64.lpc";
    attribute MEM_INIT_FILE of sram_1_0_0_0 : label is "";
    attribute RESETMODE of sram_1_0_0_0 : label is "SYNC";
    attribute GSR of FF_5 : label is "ENABLED";
    attribute GSR of FF_4 : label is "ENABLED";
    attribute GSR of FF_3 : label is "ENABLED";
    attribute GSR of FF_2 : label is "ENABLED";
    attribute GSR of FF_1 : label is "ENABLED";
    attribute GSR of FF_0 : label is "ENABLED";
    attribute NGD_DRC_MASK : integer;
    attribute NGD_DRC_MASK of Structure : architecture is 1;

begin
    -- component instantiation statements
    INV_1: INV
        port map (A=>Reset, Z=>Reset_inv);

    INV_0: INV
        port map (A=>scuba_vhi, Z=>high_inv);

    sram_1_0_0_0: PDPW16KC
        generic map (CSDECODE_R=> "0b000", CSDECODE_W=> "0b001", GSR=> "DISABLED", 
        REGMODE=> "OUTREG", DATA_WIDTH_R=>  36, DATA_WIDTH_W=>  36)
        port map (DI0=>Din(0), DI1=>Din(1), DI2=>Din(2), DI3=>Din(3), 
            DI4=>Din(4), DI5=>Din(5), DI6=>Din(6), DI7=>Din(7), 
            DI8=>Din(8), DI9=>Din(9), DI10=>Din(10), DI11=>Din(11), 
            DI12=>Din(12), DI13=>Din(13), DI14=>Din(14), DI15=>Din(15), 
            DI16=>Din(16), DI17=>Din(17), DI18=>Din(18), DI19=>Din(19), 
            DI20=>Din(20), DI21=>Din(21), DI22=>Din(22), DI23=>Din(23), 
            DI24=>Din(24), DI25=>Din(25), DI26=>Din(26), DI27=>Din(27), 
            DI28=>Din(28), DI29=>Din(29), DI30=>Din(30), DI31=>Din(31), 
            DI32=>Din(32), DI33=>scuba_vlo, DI34=>scuba_vlo, 
            DI35=>scuba_vlo, ADW0=>shreg_addr_w0, ADW1=>shreg_addr_w1, 
            ADW2=>shreg_addr_w2, ADW3=>shreg_addr_w3, 
            ADW4=>shreg_addr_w4, ADW5=>shreg_addr_w5, ADW6=>scuba_vlo, 
            ADW7=>scuba_vlo, ADW8=>scuba_vlo, BE0=>scuba_vhi, 
            BE1=>scuba_vhi, BE2=>scuba_vhi, BE3=>scuba_vhi, CEW=>ClockEn, 
            CLKW=>Clock, CSW0=>Reset_inv, CSW1=>scuba_vlo, 
            CSW2=>scuba_vlo, ADR0=>scuba_vlo, ADR1=>scuba_vlo, 
            ADR2=>scuba_vlo, ADR3=>scuba_vlo, ADR4=>scuba_vlo, 
            ADR5=>shreg_addr_r0, ADR6=>shreg_addr_r1, 
            ADR7=>shreg_addr_r2, ADR8=>shreg_addr_r3, 
            ADR9=>shreg_addr_r4, ADR10=>shreg_addr_r5, ADR11=>scuba_vlo, 
            ADR12=>scuba_vlo, ADR13=>scuba_vlo, CER=>ClockEn, 
            CLKR=>Clock, CSR0=>scuba_vlo, CSR1=>scuba_vlo, 
            CSR2=>scuba_vlo, RST=>Reset, DO0=>Q(18), DO1=>Q(19), 
            DO2=>Q(20), DO3=>Q(21), DO4=>Q(22), DO5=>Q(23), DO6=>Q(24), 
            DO7=>Q(25), DO8=>Q(26), DO9=>Q(27), DO10=>Q(28), DO11=>Q(29), 
            DO12=>Q(30), DO13=>Q(31), DO14=>Q(32), DO15=>open, 
            DO16=>open, DO17=>open, DO18=>Q(0), DO19=>Q(1), DO20=>Q(2), 
            DO21=>Q(3), DO22=>Q(4), DO23=>Q(5), DO24=>Q(6), DO25=>Q(7), 
            DO26=>Q(8), DO27=>Q(9), DO28=>Q(10), DO29=>Q(11), 
            DO30=>Q(12), DO31=>Q(13), DO32=>Q(14), DO33=>Q(15), 
            DO34=>Q(16), DO35=>Q(17));

    FF_5: FD1P3DX
        port map (D=>ishreg_addr_w0, SP=>ClockEn, CK=>Clock, CD=>Reset, 
            Q=>shreg_addr_w0);

    FF_4: FD1P3DX
        port map (D=>ishreg_addr_w1, SP=>ClockEn, CK=>Clock, CD=>Reset, 
            Q=>shreg_addr_w1);

    FF_3: FD1P3DX
        port map (D=>ishreg_addr_w2, SP=>ClockEn, CK=>Clock, CD=>Reset, 
            Q=>shreg_addr_w2);

    FF_2: FD1P3DX
        port map (D=>ishreg_addr_w3, SP=>ClockEn, CK=>Clock, CD=>Reset, 
            Q=>shreg_addr_w3);

    FF_1: FD1P3DX
        port map (D=>ishreg_addr_w4, SP=>ClockEn, CK=>Clock, CD=>Reset, 
            Q=>shreg_addr_w4);

    FF_0: FD1P3DX
        port map (D=>ishreg_addr_w5, SP=>ClockEn, CK=>Clock, CD=>Reset, 
            Q=>shreg_addr_w5);

    sreg_0_ctr_1_cia: FADD2B
        port map (A0=>scuba_vlo, A1=>scuba_vhi, B0=>scuba_vlo, 
            B1=>scuba_vhi, CI=>scuba_vlo, COUT=>sreg_0_ctr_1_ci, 
            S0=>open, S1=>open);

    sreg_0_ctr_1_0: CU2
        port map (CI=>sreg_0_ctr_1_ci, PC0=>shreg_addr_w0, 
            PC1=>shreg_addr_w1, CO=>co0, NC0=>ishreg_addr_w0, 
            NC1=>ishreg_addr_w1);

    sreg_0_ctr_1_1: CU2
        port map (CI=>co0, PC0=>shreg_addr_w2, PC1=>shreg_addr_w3, 
            CO=>co1, NC0=>ishreg_addr_w2, NC1=>ishreg_addr_w3);

    sreg_0_ctr_1_2: CU2
        port map (CI=>co1, PC0=>shreg_addr_w4, PC1=>shreg_addr_w5, 
            CO=>co2, NC0=>ishreg_addr_w4, NC1=>ishreg_addr_w5);

    precin_inst101: FADD2B
        port map (A0=>scuba_vlo, A1=>scuba_vlo, B0=>scuba_vlo, 
            B1=>scuba_vlo, CI=>scuba_vlo, COUT=>precin, S0=>open, 
            S1=>open);

    scuba_vhi_inst: VHI
        port map (Z=>scuba_vhi);

    raddr_sub_1_0: FSUB2B
        port map (A0=>scuba_vhi, A1=>shreg_addr_w0, B0=>high_inv, 
            B1=>Addr(0), BI=>precin, BOUT=>co0_1, S0=>open, 
            S1=>shreg_addr_r0);

    raddr_sub_1_1: FSUB2B
        port map (A0=>shreg_addr_w1, A1=>shreg_addr_w2, B0=>Addr(1), 
            B1=>Addr(2), BI=>co0_1, BOUT=>co1_1, S0=>shreg_addr_r1, 
            S1=>shreg_addr_r2);

    raddr_sub_1_2: FSUB2B
        port map (A0=>shreg_addr_w3, A1=>shreg_addr_w4, B0=>Addr(3), 
            B1=>Addr(4), BI=>co1_1, BOUT=>co2_1, S0=>shreg_addr_r3, 
            S1=>shreg_addr_r4);

    scuba_vlo_inst: VLO
        port map (Z=>scuba_vlo);

    raddr_sub_1_3: FSUB2B
        port map (A0=>shreg_addr_w5, A1=>scuba_vlo, B0=>Addr(5), 
            B1=>scuba_vlo, BI=>co2_1, BOUT=>open, S0=>shreg_addr_r5, 
            S1=>open);

end Structure;

-- synopsys translate_off
library ecp3;
configuration Structure_CON of dynamic_shift_register33x64 is
    for Structure
        for all:CU2 use entity ecp3.CU2(V); end for;
        for all:FADD2B use entity ecp3.FADD2B(V); end for;
        for all:FSUB2B use entity ecp3.FSUB2B(V); end for;
        for all:FD1P3DX use entity ecp3.FD1P3DX(V); end for;
        for all:INV use entity ecp3.INV(V); end for;
        for all:VHI use entity ecp3.VHI(V); end for;
        for all:VLO use entity ecp3.VLO(V); end for;
        for all:PDPW16KC use entity ecp3.PDPW16KC(V); end for;
    end for;
end Structure_CON;

-- synopsys translate_on
